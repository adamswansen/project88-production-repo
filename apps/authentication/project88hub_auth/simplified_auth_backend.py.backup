"""
Simplified Flask Authentication Backend
Minimal version that works without all extensions
"""

from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import os
import secrets
import hashlib
import hmac
import psycopg2
import json
from datetime import datetime, timedelta
import jwt
import redis

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', secrets.token_hex(32))

# Configure CORS
CORS(app, origins=[
    'https://www.project88hub.com',
    'https://display.project88hub.com',
    'https://project88hub.com'
])

# Database connection
def get_db_connection():
    return psycopg2.connect(
        
        database='raw_tag_data',
        user='postgres',
        password=''
    )

# Simple user management
@app.route('/health')
def health():
    return jsonify({'status': 'healthy', 'service': 'project88hub-auth'})

@app.route('/api/auth/register', methods=['POST'])
def register():
    try:
        data = request.get_json()
        email = data.get('email', '').lower()
        password = data.get('password', '')
        first_name = data.get('first_name', '')
        last_name = data.get('last_name', '')
        
        if not all([email, password, first_name, last_name]):
            return jsonify({'success': False, 'message': 'All fields required'}), 400
        
        # Simple password hash
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Check if user exists
        cursor.execute("SELECT id FROM users WHERE email = %s", (email,))
        if cursor.fetchone():
            return jsonify({'success': False, 'message': 'User already exists'}), 400
        
        # Create user
        cursor.execute("""
            INSERT INTO users (email, password_hash, first_name, last_name, subscription_tier, created_at)
            VALUES (%s, %s, %s, %s, %s, %s) RETURNING id
        """, (email, password_hash, first_name, last_name, 'free', datetime.now()))
        
        user_id = cursor.fetchone()[0]
        conn.commit()
        cursor.close()
        conn.close()
        
        return jsonify({'success': True, 'user_id': user_id})
        
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/auth/login', methods=['POST'])
def login():
    try:
        data = request.get_json()
        email = data.get('email', '').lower()
        password = data.get('password', '')
        
        if not email or not password:
            return jsonify({'success': False, 'message': 'Email and password required'}), 400
        
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, first_name, last_name, subscription_tier 
            FROM users 
            WHERE email = %s AND password_hash = %s
        """, (email, password_hash))
        
        user = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not user:
            return jsonify({'success': False, 'message': 'Invalid credentials'}), 401
        
        # Create simple JWT token
        token_payload = {
            'user_id': user[0],
            'email': email,
            'first_name': user[1],
            'last_name': user[2],
            'subscription_tier': user[3],
            'exp': datetime.utcnow() + timedelta(days=30)
        }
        
        token = jwt.encode(token_payload, app.secret_key, algorithm='HS256')
        
        return jsonify({
            'success': True,
            'token': token,
            'user': {
                'id': user[0],
                'email': email,
                'first_name': user[1],
                'last_name': user[2],
                'subscription_tier': user[3]
            }
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500

@app.route('/api/user/profile', methods=['GET'])
def get_profile():
    return jsonify({'message': 'Profile endpoint - coming soon'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5002, debug=False)
